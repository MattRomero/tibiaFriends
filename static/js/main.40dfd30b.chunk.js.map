{"version":3,"sources":["components/char.js","components/charList.js","components/rank.js","index.js"],"names":["Char","props","trophyColor","podium","status","rank","char","minLevelShare","Math","round","maxLevelShare","icon","faTrophy","color","index","name","level","activeChar","activeMinLevelShare","activeMaxLevelShare","onClick","clickChar","className","CharList","loading","size","Table","bordered","hover","charList","map","objectChar","key","Rank","loadChars","charsToLoad","a","async","loadedCharList","asyncForEach","getChar","charInfo","concat","sort","b","rankChars","charName","targetUrl","fetch","blob","json","data","previousCharLevel","entries","clickedChar","setState","state","chars2","chars","this","React","Component","array","callback","length","rootElement","document","getElementById","ReactDOM","render","Container","Row"],"mappings":"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","file":"static/js/main.40dfd30b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrophy } from '@fortawesome/free-solid-svg-icons';\r\n\r\n// Component of a row representing a Char\r\nexport function Char(props) {\r\n  let rank = props.char[\"rank\"];\r\n  let minLevelShare = Math.round((props.char[\"level\"] / 3) * 2);\r\n  let maxLevelShare = Math.round((props.char[\"level\"] / 2) * 3);\r\n  \r\n  let trophyColor, podium, status;\r\n\r\n  if (rank <= 3) {\r\n    if (rank == 1) { trophyColor = \"goldenrod\" }\r\n    else if (rank == 2) { trophyColor = \"silver\" }\r\n    else { trophyColor = \"#b87333\" }\r\n    podium = <FontAwesomeIcon icon={faTrophy} color={trophyColor} />;\r\n  }\r\n\r\n  let char = {\r\n    index: props.index,\r\n    name: props.char[\"name\"], \r\n    level: props.char[\"level\"],\r\n    minLevelShare: minLevelShare,\r\n    maxLevelShare: maxLevelShare,\r\n  }\r\n\r\n  if (props.activeChar) { status = \"table-info\" }\r\n  else if (props.char[\"level\"] >= props.activeMinLevelShare && props.char[\"level\"] <= props.activeMaxLevelShare) {\r\n    status = \"table-warning\"\r\n  }\r\n\r\n  return (\r\n    <tr onClick={() => { props.clickChar(char) }} className={status} >\r\n\r\n      <td>{props.char[\"rank\"]}</td>\r\n      <td>{props.char[\"name\"]} {podium}</td>\r\n      <td>{props.char[\"level\"]}</td>\r\n      <td className={props.char[\"status\"] === \"online\" ? \"text-success\" : \"text-danger\"}>{props.char[\"status\"]}</td>\r\n      <td>\r\n        {minLevelShare} -{\" \"}\r\n        {maxLevelShare}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport HashLoader from \"react-spinners/HashLoader\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nimport { Char } from \"../components/char\";\r\n\r\n// Component of the table of chars, while (props.loading === true) it shows\r\n// a spinner\r\n\r\nexport function CharList(props) {\r\n  if (props.loading) {\r\n    return <HashLoader size={50} color={\"#343a40\"} loading={props.loading} />;\r\n  } \r\n  else {\r\n    return (\r\n      <Table bordered hover size=\"sm\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Name</th>\r\n            <th>Level</th>\r\n            <th>Status</th>\r\n            <th>Sharing levels</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.charList.map((objectChar, index) => (\r\n            <Char char={objectChar}\r\n              clickChar={props.clickChar}\r\n              index={index}\r\n              key={index}\r\n              activeChar={index == props.activeChar.index ? true : false}\r\n              activeMaxLevelShare={props.activeChar.maxLevelShare}\r\n              activeMinLevelShare={props.activeChar.minLevelShare}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { CharList } from \"../components/charList\";\r\n\r\nexport class Rank extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      chars2: [\"Radagatsio\"],\r\n      chars: [\r\n        \"Radagatsio\",\r\n        \"Ardillon\",\r\n        \"Dimitrij+del+Toro\",\r\n        \"King+Nakio\",\r\n        \"Loko+Zwisky\",\r\n        \"Sweetbullet\",\r\n        \"Roluhnx\",\r\n        \"Cropolito\",\r\n        \"Stwuee\",\r\n        \"Zapatilla+the+Cat\",\r\n        \"Archer del Yoda\",\r\n        \"Loko+Kenos\",\r\n        \"Borgolito\",\r\n        \"Rolo+Manyin\",\r\n        \"Sousi+Taro\",\r\n        \"Ardillon+the+Great\",\r\n        \"Gordo+Vegano\",\r\n        \"Eldermake\"\r\n      ],\r\n      charList: [],\r\n      loading: true,\r\n      activeChar: false,\r\n    };\r\n  }\r\n\r\n  // loadChars() loads the charlist asynchronally\r\n  // charsToLoad = array of char names\r\n  // Returns an array of objects with each char info\r\n  \r\n  loadChars = async (charsToLoad) => {\r\n    let loadedCharList = [];\r\n    await asyncForEach(charsToLoad, async char => {\r\n      let charInfo = await this.getChar(char);\r\n      loadedCharList = loadedCharList.concat(charInfo);\r\n    });\r\n    loadedCharList.sort((a, b) => b.level - a.level);\r\n    loadedCharList = this.rankChars(loadedCharList);\r\n    return loadedCharList;\r\n  }\r\n\r\n  // getChar() returns the object with the char's info\r\n\r\n  getChar = async (charName) => {\r\n    let targetUrl = `https://api.tibiadata.com/v2/characters/${charName}.json`;\r\n    let blob = await fetch(targetUrl);\r\n    let data = await blob.json();\r\n    return data[\"characters\"][\"data\"];\r\n  }\r\n\r\n  // rankChars() adds a chars rank in the already sorted array, comparing each lvl with \r\n  // the one from previous char.\r\n  // charList = array of objects with each char info\r\n\r\n  rankChars = (charList) => {\r\n    let previousCharLevel = charList[0]['level'];\r\n    let rank = 1;\r\n    for (let [index, char] of charList.entries()) {\r\n      if (char['level'] < previousCharLevel) { rank = index + 1; previousCharLevel = char['level']; }\r\n      charList[index][\"rank\"] = rank;\r\n    }\r\n    return charList;\r\n  }\r\n\r\n  clickChar = (clickedChar) => {\r\n    this.setState({ activeChar: clickedChar })\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let loadedCharList = await this.loadChars(this.state.chars);\r\n    this.setState({ charList: loadedCharList, loading: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CharList\r\n        loading={this.state.loading}\r\n        clickChar={this.clickChar}\r\n        charList={this.state.charList}\r\n        activeChar={this.state.activeChar} />\r\n    );\r\n  }\r\n}\r\n\r\nasync function asyncForEach(array, callback) {\r\n  for (let index = 0; index < array.length; index++) {\r\n    await callback(array[index], index, array);\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./styles.css\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { Rank } from \"./components/rank\";\n\n// <Image src=\"https://cdn1.iconfinder.com/data/icons/game-design-butterscotch-vol-1/256/Leader-512.png\" fluid/>\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <h1>Tibia ranking</h1>\n      </Row>\n      <Row className=\"align-items-center\">\n       <span className=\"dot\"></span>Sharing partners\n      </Row>\n      <Row>\n        <Rank />\n      </Row>\n    </Container>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}